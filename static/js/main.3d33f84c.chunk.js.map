{"version":3,"sources":["components/Characters/CharacterImages.js","components/Nav.js","components/Score.js","App.js","serviceWorker.js","index.js"],"names":["CharacterImages","id","name","image","isPicked","className","key","data-id","onClick","src","alt","Nav","props","Score","type","score","App","state","characters","pickedCharacters","topScore","message","event","target","attributes","getNamedItem","value","console","log","shuffleCharacters","checkGuess","updateTopScore","newState","cb","length","setState","shuffleArray","array","counter","index","Math","floor","random","temp","includes","alert","push","checkWin","basename","this","map","character","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kgCAgBeA,G,MAbS,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,SAApB,OACpB,yBACIC,UAAU,OACVC,IAAKL,EACLM,UAASN,EACTC,KAAMA,EACNM,QAASJ,GAET,yBAAKC,UAAU,cACX,yBAAKI,IAAKN,EAAOO,IAAKR,EAAMA,KAAMA,QCA/BS,EAVH,SAAAC,GACR,OACI,yBAAKP,UAAU,kBACX,yBAAKA,UAAU,kBACX,uBAAGA,UAAU,qBAAb,mBCEDQ,EAND,SAAAD,GAAK,OACf,wBAAIP,UAAU,SACTO,EAAME,KADX,KACmBF,EAAMG,Q,wBC8FdC,E,2MAxFbC,MAAQ,CACNC,WAAYA,EACZC,iBAAkB,GAClBC,SAAU,EACVC,QAAS,I,EAGXjB,SAAW,SAAAkB,GACT,IAAMpB,EAAOoB,EAAMC,OAAOC,WAAWC,aAAa,QAAQC,MAC1DC,QAAQC,IAAIN,EAAMC,OAAOC,WAAWC,aAAa,QAAQC,OACzDC,QAAQC,IAAI,EAAKX,OACjB,EAAKY,oBACL,EAAKC,WAAW5B,EAAM,EAAK6B,iB,EAG7BA,eAAiB,SAACC,EAAUC,GACtBD,EAASb,iBAAiBe,OAASF,EAASZ,WAC9CY,EAASZ,WACT,EAAKe,SAAS,CAAEf,SAAUY,EAASZ,YAErCa,EAAGD,I,EAGLH,kBAAoB,WAClB,EAAKM,SAAS,CAACjB,WAAY,EAAKkB,aAAa,EAAKnB,MAAMC,e,EAGxDkB,aAAe,SAACC,GAEhB,IADA,IAAIC,EAAUD,EAAMH,OACbI,EAAU,GAAG,CAClB,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWJ,GAEnCK,EAAON,IADXC,GAEAD,EAAMC,GAAWD,EAAME,GACvBF,EAAME,GAASI,EAEjB,OAAON,G,EAITP,WAAa,SAAC5B,EAAM+B,GAClB,IAAMD,EAAQ,eAAQ,EAAKf,OACvBe,EAASb,iBAAiByB,SAAS1C,IACrC8B,EAASX,QAAT,+CACAW,EAASb,iBAAmB,GAC5B0B,MAAM,gDACN,EAAKV,SAAS,CAAEd,QAASW,EAASX,UAClC,EAAKc,SAAS,CAAEhB,iBAAkB,OAElCa,EAASb,iBAAiB2B,KAAK5C,GAC/B,EAAKiC,SAAS,CAAEhB,iBAAkBa,EAASb,oBAE7Cc,EAAGD,EAAU,EAAKe,W,wEAGV,IAAD,OACP,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,6BACE,kBAAC,EAAD,MACA,yBAAK3C,UAAU,aACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,iBACb,2EAEF,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAOS,KAAK,QAAQC,MAAOkC,KAAKhC,MAAME,iBAAiBe,SACvD,kBAAC,EAAD,CAAOpB,KAAK,YAAYC,MAAOkC,KAAKhC,MAAMG,cAIhD,yBAAKnB,GAAG,OAAOI,UAAU,aACtB4C,KAAKhC,MAAMC,WAAWgC,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACE7C,IAAK6C,EAAUlD,GACfA,GAAIkD,EAAUlD,GACdC,KAAMiD,EAAUjD,KAChBC,MAAOgD,EAAUhD,MACjBC,SAAU,EAAKA,qB,GAhFbgD,aCIEC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3d33f84c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CharacterImages.css\";\n\nconst CharacterImages = ({ id, name, image, isPicked }) => (\n    <div \n        className=\"card\"\n        key={id}\n        data-id={id}\n        name={name}\n        onClick={isPicked}\n        >\n        <div className=\"card-image\">\n            <img src={image} alt={name} name={name}/>\n        </div>\n    </div>\n)\nexport default CharacterImages;","import React from 'react'\n\nconst Nav = props => {\n    return (\n        <nav className=\"teal lighten-2\">\n            <div className=\"valign-wrapper\">\n                <p className=\"brand-logo center\">Clicky Game!</p>\n            </div>\n        </nav>\n    )\n}\n\nexport default Nav","import React from 'react';\n\nconst Score = props => (\n    <h4 className=\"score\">\n        {props.type}: {props.score}\n    </h4>\n)\n\nexport default Score;","import React, {Component} from 'react';\nimport CharacterImages from './components/Characters/CharacterImages';\nimport Nav from './components/Nav';\nimport Score from './components/Score';\nimport characters from './characters.json';\nimport './App.css';\nimport { HashRouter } from 'react-router-dom';\n\nclass App extends Component {\n\n  state = {\n    characters: characters,\n    pickedCharacters: [],\n    topScore: 0,\n    message: \"\",\n  }\n\n  isPicked = event => {\n    const name = event.target.attributes.getNamedItem('name').value\n    console.log(event.target.attributes.getNamedItem('name').value)\n    console.log(this.state)\n    this.shuffleCharacters();\n    this.checkGuess(name, this.updateTopScore);\n  }\n\n  updateTopScore = (newState, cb) => {\n    if (newState.pickedCharacters.length > newState.topScore) {\n      newState.topScore++;\n      this.setState({ topScore: newState.topScore })\n    }\n    cb(newState);\n  }\n\n  shuffleCharacters = () => {\n    this.setState({characters: this.shuffleArray(this.state.characters)})\n  }\n\n    shuffleArray = (array) => {\n    let counter = array.length;\n    while (counter > 0) {\n      let index = Math.floor(Math.random() * counter);\n      counter--;\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n    }\n    return array;\n  };\n\n\n  checkGuess = (name, cb) => {\n    const newState = { ...this.state };\n    if (newState.pickedCharacters.includes(name)) {\n      newState.message = `You already chose that character. Game Over!`\n      newState.pickedCharacters = []\n      alert(`You already chose that character. Game Over!`)\n      this.setState({ message: newState.message})\n      this.setState({ pickedCharacters: []})\n    } else {\n      newState.pickedCharacters.push(name);\n      this.setState({ pickedCharacters: newState.pickedCharacters })\n    }\n    cb(newState, this.checkWin)\n  }\n\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <div>\n          <Nav/>\n          <div className=\"container\">\n            <div className=\"row score-info valign-wrapper\">\n              <div className=\"col l6 m8 s12\">\n                <h4>Try to not click the same character twice!</h4>\n              </div>\n              <div className=\"col l6 m4 s12 center\">\n                <Score type=\"Score\" score={this.state.pickedCharacters.length}/>\n                <Score type=\"Top Score\" score={this.state.topScore}/>\n              </div>\n            </div>\n          </div>\n          <div id=\"grid\" className=\"container\">\n            {this.state.characters.map(character => (\n              <CharacterImages\n                key={character.id}\n                id={character.id}\n                name={character.name}\n                image={character.image}\n                isPicked={this.isPicked}\n              />\n            ))}\n          </div>\n        </div>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}